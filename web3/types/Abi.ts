/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Secrets {
  export type SecretStruct = {
    id: BigNumberish;
    owner: AddressLike;
    title: string;
    description: string;
    content: string;
    price: BigNumberish;
  };

  export type SecretStructOutput = [
    id: bigint,
    owner: string,
    title: string,
    description: string,
    content: string,
    price: bigint
  ] & {
    id: bigint;
    owner: string;
    title: string;
    description: string;
    content: string;
    price: bigint;
  };
}

export interface AbiInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "accessKeys"
      | "addSecret"
      | "balances"
      | "getSecretsCount"
      | "getSecretsPaginated"
      | "platformBalance"
      | "platformFeeBips"
      | "platformOwner"
      | "secrets"
      | "unlockSecret"
      | "withdrawBalance"
      | "withdrawPlatformFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "SecretAdded" | "SecretUnlocked"
  ): EventFragment;

  encodeFunctionData(functionFragment: "accessKeys", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addSecret",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balances",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSecretsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSecretsPaginated",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "platformBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "platformFeeBips",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "platformOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "secrets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockSecret",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPlatformFees",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "accessKeys", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addSecret", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSecretsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSecretsPaginated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformFeeBips",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "secrets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unlockSecret",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPlatformFees",
    data: BytesLike
  ): Result;
}

export namespace SecretAddedEvent {
  export type InputTuple = [secretId: BigNumberish, owner: AddressLike];
  export type OutputTuple = [secretId: bigint, owner: string];
  export interface OutputObject {
    secretId: bigint;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SecretUnlockedEvent {
  export type InputTuple = [
    secretId: BigNumberish,
    buyer: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [secretId: bigint, buyer: string, amount: bigint];
  export interface OutputObject {
    secretId: bigint;
    buyer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Abi extends BaseContract {
  connect(runner?: ContractRunner | null): Abi;
  waitForDeployment(): Promise<this>;

  interface: AbiInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  accessKeys: TypedContractMethod<[arg0: string], [boolean], "view">;

  addSecret: TypedContractMethod<
    [title: string, description: string, content: string, price: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  balances: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getSecretsCount: TypedContractMethod<[], [bigint], "view">;

  getSecretsPaginated: TypedContractMethod<
    [start: BigNumberish, count: BigNumberish],
    [Secrets.SecretStructOutput[]],
    "view"
  >;

  platformBalance: TypedContractMethod<[], [bigint], "view">;

  platformFeeBips: TypedContractMethod<[], [bigint], "view">;

  platformOwner: TypedContractMethod<[], [string], "view">;

  secrets: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, string, bigint] & {
        id: bigint;
        owner: string;
        title: string;
        description: string;
        content: string;
        price: bigint;
      }
    ],
    "view"
  >;

  unlockSecret: TypedContractMethod<
    [secretId: BigNumberish],
    [void],
    "payable"
  >;

  withdrawBalance: TypedContractMethod<[], [void], "nonpayable">;

  withdrawPlatformFees: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "accessKeys"
  ): TypedContractMethod<[arg0: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "addSecret"
  ): TypedContractMethod<
    [title: string, description: string, content: string, price: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balances"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSecretsCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSecretsPaginated"
  ): TypedContractMethod<
    [start: BigNumberish, count: BigNumberish],
    [Secrets.SecretStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "platformBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "platformFeeBips"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "platformOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "secrets"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, string, bigint] & {
        id: bigint;
        owner: string;
        title: string;
        description: string;
        content: string;
        price: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "unlockSecret"
  ): TypedContractMethod<[secretId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "withdrawBalance"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawPlatformFees"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "SecretAdded"
  ): TypedContractEvent<
    SecretAddedEvent.InputTuple,
    SecretAddedEvent.OutputTuple,
    SecretAddedEvent.OutputObject
  >;
  getEvent(
    key: "SecretUnlocked"
  ): TypedContractEvent<
    SecretUnlockedEvent.InputTuple,
    SecretUnlockedEvent.OutputTuple,
    SecretUnlockedEvent.OutputObject
  >;

  filters: {
    "SecretAdded(uint256,address)": TypedContractEvent<
      SecretAddedEvent.InputTuple,
      SecretAddedEvent.OutputTuple,
      SecretAddedEvent.OutputObject
    >;
    SecretAdded: TypedContractEvent<
      SecretAddedEvent.InputTuple,
      SecretAddedEvent.OutputTuple,
      SecretAddedEvent.OutputObject
    >;

    "SecretUnlocked(uint256,address,uint256)": TypedContractEvent<
      SecretUnlockedEvent.InputTuple,
      SecretUnlockedEvent.OutputTuple,
      SecretUnlockedEvent.OutputObject
    >;
    SecretUnlocked: TypedContractEvent<
      SecretUnlockedEvent.InputTuple,
      SecretUnlockedEvent.OutputTuple,
      SecretUnlockedEvent.OutputObject
    >;
  };
}
